openapi: 3.1.1
info:
  title: Payment Service
  version: 0.1.0

servers:
  - url: /v1

tags:
  - name: Pricing
    description: Pricing and cost calculation endpoints
  - name: Balance
    description: Account balance and credit management
  - name: Payments
    description: Payment processing and top-up operations
  - name: x402
    description: x402 protocol payment endpoints (EIP-3009 USDC payments)
  - name: Currencies
    description: Supported currencies and exchange rates
  - name: Redemption
    description: Credit redemption and gift processing
  - name: Approvals
    description: Credit sharing and approval management
  - name: Info
    description: Service information and metadata

components:
  schemas:
    ByteCount:
      type: integer
      description: A positive integer representing a byte count of data items
      pattern: "^[0-9]+$"
      example: 5242880

    CreditResponse:
      type: object
      properties:
        winc:
          "$ref": "#/components/schemas/Winc"
        adjustments:
          "$ref": "#/components/schemas/Adjustment"

    BalanceResponse:
      properties:
        controlledWinc:
          type: string
          description: The total amount of winc that a user has if they revoked all approvals they've created
        winc:
          type: string
          description: The total amount of winc the user can spend without using any approved balances given to them
        effectiveBalance:
          type: string
          description: The total amount of winc that can currently be spent by the user's balance, including any shared Credits
        givenApprovals:
          "$ref": "#/components/schemas/CreditShareApprovals"
        receivedApprovals:
          "$ref": "#/components/schemas/CreditShareApprovals"

    PaymentCreditResponse:
      type: object
      properties:
        winc:
          "$ref": "#/components/schemas/Winc"
        adjustments:
          "$ref": "#/components/schemas/Adjustment"
        fees:
          "$ref": "#/components/schemas/Adjustment"
        actualPaymentAmount:
          "$ref": "#/components/schemas/ActualPaymentAmount"
        quotedPaymentAmount:
          "$ref": "#/components/schemas/QuotedPaymentAmount"

    ActualPaymentAmount:
      type: integer
      description: The actual payment amount a user will spend in the given currency's smallest unit value. For example, $8 USD is 800
      example: 800

    QuotedPaymentAmount:
      type: integer
      description: The quoted payment amount without adjustments in the given currency's smallest unit value. For example, $10 USD is 1000
      example: 1000

    Winc:
      type: string
      description: A big number string representing an amount of credits in winc. One credit is equivalent to 10^12 winc
      example: "332824926"

    Adjustment:
      type: array
      items:
        type: object
        properties:
          name:
            type: string
          description:
            type: string
          operatorMagnitude:
            type: number
          operator:
            type: string
          adjustmentAmount:
            type: string
          promoCode:
            type: string
      example:
        - name: "Adjustment"
          description: "Some great subsidy"
          operatorMagnitude: "0.6"
          operator: "multiply"
          adjustmentAmount: "-12300"
          promoCode: "SOME-GREAT-CODE"

    CurrencyType:
      type: string
      description: Currency type for a given payment amount
      example: usd

    TokenType:
      type: string
      description: Token type for a given transaction
      example: arweave

    PriceFiatOrTokenType:
      type: string
      description: Type for a given price request. Either "fiat" type or "token" type
      example: kyve

    PaymentAmount:
      type: integer
      description: Payment amount in a given currency's smallest unit value. For example, $10 USD is 1000. 1 AR is 1000000000000
      example: 1000

    SignatureHeader:
      type: string
      description: The signature value derived from signing the request's data concatenated with the provided nonce using the private key from the provided public key

    NonceHeader:
      type: string
      description: The nonce value concatenated with the request's data when deriving the provided the signature

    PublicKeyHeader:
      type: string
      description: The "modulus" of the JWK used to create the signature header

    PromoCode:
      type: string
      description: Comma-separated list of promo codes

    DestinationAddress:
      type: string
      description: Destination wallet address for payment
      example: abcdefghijklmnopqrxtuvwxyz123456789ABCDEFGH

    DestinationAddressType:
      type: string
      description: Destination wallet address type
      example: arweave

    WinstonCreditAmount:
      type: string
      description: A big number string representing an amount of credits in winc. One credit is equivalent to 10^12 winc
      example: "332824926"

    PendingPaymentTx:
      type: object
      description: A payment transaction as our service sees it
      properties:
        transactionId:
          type: string
          description: The transaction ID of the pending payment transaction
        transactionQuantity:
          type: integer
          description: The quantity of the pending payment transaction
        createdAt:
          type: string
          description: The date and time the transaction was entered into the service
        tokenType:
          "$ref": "#/components/schemas/TokenType"
        destinationAddress:
          "$ref": "#/components/schemas/DestinationAddress"
        destinationAddressType:
          "$ref": "#/components/schemas/DestinationAddressType"
        winstonCreditAmount:
          "$ref": "#/components/schemas/WinstonCreditAmount"
        adjustments:
          "$ref": "#/components/schemas/Adjustment"

    CreditedPaymentTx:
      type: object
      description: A payment transaction as our service sees it
      properties:
        allOf:
          "$ref": "#/components/schemas/PendingPaymentTx"
        blockHeight:
          type: integer
          description: The block height at which the transaction was credited
        creditedAt:
          type: string
          description: The date and time the transaction was credited in the service

    FailedPaymentTx:
      type: object
      description: A payment transaction as our service sees it
      properties:
        allOf:
          "$ref": "#/components/schemas/PendingPaymentTx"
        failedAt:
          type: string
          description: The date and time the transaction failed in the service
        failureReason:
          type: string
          description: The reason the transaction failed in the service

    TopUpQuote:
      type: object
      description: A copy of the top up quote that was saved to the service's database
      properties:
        topUpQuoteId:
          type: string
          example: caa8b54a-eb5e-4134-8ae2-a3946a428ec7
        destinationAddress:
          "$ref": "#/components/schemas/DestinationAddress"
        destinationAddressType:
          "$ref": "#/components/schemas/DestinationAddressType"
        paymentAmount:
          "$ref": "#/components/schemas/ActualPaymentAmount"
        quotedPaymentAmount:
          "$ref": "#/components/schemas/QuotedPaymentAmount"
        currencyType:
          type: string
          example: usd
        winstonCreditAmount:
          "$ref": "#/components/schemas/WinstonCreditAmount"
        quoteExpirationDate:
          type: string
          example: 2023-05-17T21:46:38.404Z
        paymentProvider:
          type: string
          example: stripe

    ConversionRates:
      type: object
      properties:
        winc:
          type: string
          description: A big number representing the amount of credits in winc that 1GB of storage costs based on current market rates. One credit is equivalent to 10^12 winc.
          example: 332824926
        fiat:
          type: object
          description: The amount of fiat currencies that 1GB of storage costs based on current market rates.
          example:
            {
              aud: 8.1228081675468,
              brl: 26.0465204865588,
              cad: 7.1550718332636,
              eur: 4.9519274126615995,
              gbp: 4.251862830414,
              hkd: 42.3539072259708,
              inr: 443.50120792114916,
              jpy: 781.2411885860027,
              sgd: 7.3197929114399995,
              usd: 5.4049103776452005,
            }
        adjustments:
          "$ref": "#/components/schemas/Adjustment"

    PaymentSession:
      type: object
      description: The full payment-intent or checkout-session from a payment provider
      properties:
        id:
          type: string
          description: The payment provider's given ID for this payment intent # cspell:disable
          example: cs_test_a1lFM2vIpifSqH8VtIjnbSGnr0RAQtEx6R2OMbhvbeK7fradNG7357Roxy # cspell:enable
        client_secret:
          type: string
          description: Available on the payment-intent top up flow, this is the client secret that must be provided in order to confirm the payment intent with a payment method # cspell:disable
          example: cs_test_a1lFM2vIpifSqH8VtIjnbSGnr0RAQtEx6R2OMbhvbeK7fradNG7357Roxy#fidkdWxOYHwnPyd1blpxYHZxWjA0T1BEcXJGPWR1VUpSbkFJbTdDVV9uVG5sTl9AblFqM3J0YklGcVRqRmlJM1YxaTdvaWdnZjBIYkphckpQYVA8UWs8NktLc3REQmdwNDQwaW5PRm1IbG5CNTVdUGNRaGo3fycpJ2N3amhWYHdzYHcnP3F3cGApJ2lkfGpwcVF8dWAnPyd2bGtiaWBabHFgaCcpJ2BrZGdpYFVpZGZgbWppYWB3dic%2FcXdwYHgl # cspell:enable
        url:
          type: string
          description: Available on a checkout-session top up flow, this is the URL in which to fulfill the quote
          example: https://checkout.stripe.com/c/pay/cs_test_a1lFM2vIpifSqH8VtIjnbSGnr0RAQtEx6R2OMbhvbeK7fradNG7357Roxy#fidkdWxOYHwnPyd1blpxYHZxWjA0T1BEcXJGPWR1VUpSbkFJbTdDVV9uVG5sTl9AblFqM3J0YklGcVRqRmlJM1YxaTdvaWdnZjBIYkphckpQYVA8UWs8NktLc3REQmdwNDQwaW5PRm1IbG5CNTVdUGNRaGo3fycpJ2N3amhWYHdzYHcnP3F3cGApJ2lkfGpwcVF8dWAnPyd2bGtiaWBabHFgaCcpJ2BrZGdpYFVpZGZgbWppYWB3dic%2FcXdwYHgl

    ReturnUrl:
      type: string
      description: The URL to return to after a successful payment
      default: https://app.ardrive.io

    SuccessUrl:
      type: string
      description: The URL to return to after a successful payment
      default: https://app.ardrive.io

    CancelUrl:
      type: string
      description: The URL to return to after a canceled payment
      default: https://app.ardrive.io

    UiMode:
      type: string
      description: Which UI Mode to create the checkout session in
      default: hosted
      example: embedded

    CreditShareApprovals:
      type: array
      items:
        type: object
        properties:
          approvalDataItemId:
            type: string
            description: The data item ID of the approval
            example: abcdefghijklmnopqrxtuvwxyz123456789ABCDEFGH
          approvedAddress:
            type: string
            description: Approved wallet address
            example: abcdefghijklmnopqrxtuvwxyz123456789ABCDEFGH
          payingAddress:
            type: string
            description: Paying wallet address
            example: abcdefghijklmnopqrxtuvwxyz123456789ABCDEFGH
          approvedWincAmount:
            type: string
            description: The amount of winc approved
            example: "332824926"
          usedWincAmount:
            type: string
            description: The amount of winc used
            example: "332824926"
          creationDate:
            type: string
            description: The date and time the approval was created
            example: 2023-05-17T21:46:38.404Z
          expirationDate:
            type: string
            description: The date and time the approval expires
            example: 2023-05-17T21:46:38.404Z

    X402PaymentRequirements:
      type: object
      description: x402 payment requirements returned in 402 Payment Required response
      properties:
        scheme:
          type: string
          description: The payment scheme (e.g., exact for EIP-3009)
          example: exact
        network:
          type: string
          description: The blockchain network identifier
          example: base-mainnet
        maxAmountRequired:
          type: string
          description: Maximum payment amount required in USDC atomic units (6 decimals)
          example: "1000000"
        resource:
          type: string
          description: The resource URL being paid for
          example: "/v1/tx"
        description:
          type: string
          description: Human-readable description of the resource
          example: "Upload data to Arweave via AR.IO Bundler"
        mimeType:
          type: string
          description: MIME type of the resource response
          example: "application/json"
        outputSchema:
          type: object
          description: JSON schema describing the resource response structure
        payTo:
          type: string
          description: The recipient address for the payment
          example: "0x6A0A10FFD285c971B841bee8892878c0d583Bf67"
        maxTimeoutSeconds:
          type: integer
          description: Maximum time in seconds to complete the payment
          example: 300
        asset:
          type: string
          description: EIP-3009 compliant USDC contract address
          example: "0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913"
        extra:
          type: object
          description: Additional metadata about the payment asset
          properties:
            name:
              type: string
              example: "USD Coin"
            version:
              type: string
              example: "2"

    X402PaymentRequiredResponse:
      type: object
      description: 402 Payment Required response with x402 payment options
      properties:
        x402Version:
          type: integer
          description: x402 protocol version
          example: 1
        accepts:
          type: array
          description: Array of accepted payment methods
          items:
            $ref: "#/components/schemas/X402PaymentRequirements"
        error:
          type: string
          description: Optional error message if price quote cannot be generated
          example: "Insufficient balance"

    X402PaymentResult:
      type: object
      description: Result of x402 payment verification and settlement
      properties:
        success:
          type: boolean
          description: Whether the payment was successfully verified and settled
          example: true
        paymentId:
          type: string
          format: uuid
          description: Unique identifier for this payment transaction (UUID)
          example: "550e8400-e29b-41d4-a716-446655440000"
        transactionHash:
          type: string
          description: Blockchain transaction hash for the USDC transfer (for on-chain verification)
          example: "0xb8a52725cdc816d060392dcecaa1528872acf9ea0bd097a86e2432dd5d2213ca"
        network:
          type: string
          description: Network where payment was made
          example: "base-mainnet"
        wincPaid:
          type: string
          description: Amount of winc paid/deducted
          example: "1000000"
        wincReserved:
          type: string
          description: Amount of winc reserved for this upload
          example: "1000000"
        wincCredited:
          type: string
          description: Amount of winc credited to account (for topup mode)
          example: "950000"
        mode:
          type: string
          description: Payment mode used
          enum: [payg, topup, hybrid]
          example: "hybrid"
        error:
          type: string
          description: Error message if success is false
          example: "Invalid payment signature"

    X402FinalizeResult:
      type: object
      description: Result of x402 payment finalization after actual upload size is known
      properties:
        success:
          type: boolean
          description: Whether finalization succeeded
          example: true
        status:
          type: string
          description: Finalization status
          enum: [confirmed, overpaid_refund, fraud_penalty]
          example: "confirmed"
        actualByteCount:
          type: integer
          description: The actual byte count of the uploaded data item
          example: 1024
        refundWinc:
          type: string
          description: Amount of winc refunded if actual size was less than declared
          example: "50000"
        error:
          type: string
          description: Error message if success is false
          example: "Payment not found"

paths:
  # winc Price for ByteCount of Data Items
  /price/bytes/{byteCount}:
    get:
      tags:
        - Pricing
      summary: Get Amount of Credits in winc for Byte Count
      description: Returns the current amount of winc it will cost to upload a given byte count worth of data items

      parameters:
        - name: byteCount
          in: path
          required: true
          schema:
            "$ref": "#/components/schemas/ByteCount"

      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CreditResponse"

        "400":
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
                default: "Invalid byte count"

        "503":
          description: Service Unavailable
          content:
            text/plain:
              schema:
                type: string
                default: "Pricing Oracle Unavailable"

  # winc for payment endpoint
  /price/{type}/{amount}:
    get:
      tags:
        - Pricing
      summary: Get winc for Payment Type and Amount
      description: Returns the current amount of winc this service will quote for a given payment type and amount

      parameters:
        - name: x-signature
          in: header
          required: false
          schema:
            "$ref": "#/components/schemas/SignatureHeader"

        - name: x-nonce
          in: header
          required: false
          schema:
            "$ref": "#/components/schemas/NonceHeader"

        - name: x-public-key
          in: header
          required: false
          schema:
            "$ref": "#/components/schemas/PublicKeyHeader"

        - name: type
          in: path
          required: true
          schema:
            "$ref": "#/components/schemas/PriceFiatOrTokenType"

        - name: amount
          in: path
          required: true
          schema:
            "$ref": "#/components/schemas/PaymentAmount"

        - name: promoCode
          in: query
          required: false
          schema:
            "$ref": "#/components/schemas/PromoCode"

        - name: destinationAddress
          in: query
          required: false
          schema:
            type: string
            description: Destination wallet address. This will override the signature header's public key if provided

      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PaymentCreditResponse"

        "400":
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
                description: "Error message string dependent on cause"
                example: "Payment Amount is Invalid"

        "503":
          description: Service Unavailable
          content:
            text/plain:
              schema:
                type: string
                default: "Fiat Oracle Unavailable"

  # Balance endpoint
  /balance:
    parameters:
      - name: x-signature
        in: header
        required: false
        schema:
          "$ref": "#/components/schemas/SignatureHeader"

      - name: x-nonce
        in: header
        required: false
        schema:
          "$ref": "#/components/schemas/NonceHeader"

      - name: x-public-key
        in: header
        required: false
        schema:
          "$ref": "#/components/schemas/PublicKeyHeader"

      - name: address
        in: query
        required: false
        schema:
          type: string
          description: Destination wallet address, required if no signature headers are provided

    get:
      tags:
        - Balance
      summary: Get Current Balance of winc
      description: Use a signed request or a previously obtained JWT to get the signing wallet's current service balance in winc

      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/BalanceResponse"

        "403":
          description: Forbidden
          content:
            text/plain:
              schema:
                type: string
                default: "Invalid signature or missing required headers"

        "404":
          description: Not Found
          content:
            text/plain:
              schema:
                type: string
                default: "User Not Found"

        "503":
          description: Service Unavailable
          content:
            text/plain:
              schema:
                type: string
                default: "Cloud Database Unavailable"

  /top-up/{method}/{address}/{currency}/{amount}:
    get:
      tags:
        - Payments
      summary: Get Top Up Quote for Credits
      description: Get a top up quote and payment session for a given method (payment-intent or checkout-session), destination address, currency type, and payment amount

      parameters:
        - name: x-signature
          in: header
          required: false
          schema:
            "$ref": "#/components/schemas/SignatureHeader"

        - name: x-nonce
          in: header
          required: false
          schema:
            "$ref": "#/components/schemas/NonceHeader"

        - name: x-public-key
          in: header
          required: false
          schema:
            "$ref": "#/components/schemas/PublicKeyHeader"

        - name: method
          in: path
          required: true
          schema:
            type: string
            example: checkout-session

        - name: address
          in: path
          required: true
          schema:
            type: string
            description: Destination wallet address

        - name: currency
          in: path
          required: true
          schema:
            "$ref": "#/components/schemas/CurrencyType"

        - name: amount
          in: path
          required: true
          schema:
            "$ref": "#/components/schemas/PaymentAmount"

        - name: promoCode
          in: query
          required: false
          schema:
            "$ref": "#/components/schemas/PromoCode"

        - name: uiMode
          in: query
          required: false
          schema:
            "$ref": "#/components/schemas/UiMode"

        - name: returnUrl
          in: query
          required: false
          schema:
            "$ref": "#/components/schemas/ReturnUrl"

        - name: successUrl
          in: query
          required: false
          schema:
            "$ref": "#/components/schemas/SuccessUrl"

        - name: cancelUrl
          in: query
          required: false
          schema:
            "$ref": "#/components/schemas/CancelUrl"

      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  paymentSession:
                    allOf:
                      - "$ref": "#/components/schemas/PaymentSession"
                  topUpQuote:
                    allOf:
                      - "$ref": "#/components/schemas/TopUpQuote"
                  adjustments:
                    "$ref": "#/components/schemas/Adjustment"
                  fees:
                    "$ref": "#/components/schemas/Adjustment"

        "403":
          description: Forbidden
          content:
            text/plain:
              schema:
                type: string
                default: "Destination address is not a valid Arweave native address!"

        "400":
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
                description: "Error message string dependent on cause"
                example: "Payment Amount is Invalid!"

        "503":
          description: Service Unavailable
          content:
            text/plain:
              schema:
                type: string
                default: "Fiat Oracle Unavailable"

  /currencies:
    get:
      tags:
        - Currencies
      summary: Get Supported Currencies
      description: Returns the current list of currency types supported by this service

      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  supportedCurrencies:
                    type: array
                    example: ["usd", "jpy"]
                    items:
                      type: string
                  limits:
                    type: object
                    example:
                      {
                        usd:
                          {
                            minimumPaymentAmount: 500,
                            maximumPaymentAmount: 1000000,
                            suggestedPaymentAmounts: [2500, 5000, 10000],
                            zeroDecimalCurrency: false,
                          },
                        jpy:
                          {
                            minimumPaymentAmount: 750,
                            maximumPaymentAmount: 1500000,
                            suggestedPaymentAmounts: [3500, 6500, 15000],
                            zeroDecimalCurrency: true,
                          },
                      }

  /countries:
    get:
      tags:
        - Currencies
      summary: Get Supported Countries
      description: Returns the current list of currency types supported by this service

      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                example: ["United Kingdom", "United States"]
                items:
                  type: string

  /rates:
    get:
      tags:
        - Currencies
      summary: Get conversion rates for 1GB of storage
      description: Returns the supported fiat currency conversion rates for 1GB of storage based on current market prices.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ConversionRates"

  /rates/{currency}:
    get:
      tags:
        - Currencies
      summary: Get current conversion rate for 1 AR for a given currency
      description: Returns the supported fiat currency conversion rate for 1AR based on current market prices.

      parameters:
        - name: currency
          in: path
          required: true
          schema:
            "$ref": "#/components/schemas/CurrencyType"

      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  currency:
                    type: string
                    example: usd
                  rate:
                    type: number
                    example: 5.61
        "404":
          description: Not Found
          content:
            text/plain:
              schema:
                type: string
                default: "Invalid currency"

  /redeem:
    get:
      tags:
        - Redemption
      summary: Redeem credits gifted via email
      description: Redeem credits gifted via email by providing the destination wallet address for the credits, the redemption ID, and recipient email address

      parameters:
        - name: destinationAddress
          in: query
          required: true
          schema:
            type: string
            description: Destination wallet address

        - name: id
          in: query
          required: true
          schema:
            type: string
            description: ID for the redemption

        - name: email
          in: query
          required: true
          schema:
            type: string
            description: Recipient email address for the redemption

      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Payment receipt redeemed for 1000 winc!
                  userBalance:
                    type: string
                    example: 1000
                  userAddress:
                    type: string
                    example: abcdefghijklmnopqrxtuvwxyz123456789ABCDEFGH
                  userCreationDate:
                    type: string
                    example: 2023-05-17T21:46:38.404Z

        "400":
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
                description: "Error message string dependent on cause"
                example: "Failure to redeem payment receipt!"

        "503":
          description: Service Unavailable
          content:
            text/plain:
              schema:
                type: string
                default: "Error while redeeming payment receipt. Unable to reach Database!"

  /account/balance/{token}:
    post:
      tags:
        - Payments
      summary: Post a pending payment transaction
      description: Post a transaction ID that has been sent to the payment service's wallet

      requestBody:
        required: true
        description: JSON with `tx_id` key of the pending payment transaction
        content:
          application/json:
            schema:
              type: object
              properties:
                tx_id:
                  type: string
                  description: The transaction ID of the pending payment transaction

      parameters:
        - name: token
          in: path
          required: true
          schema:
            "$ref": "#/components/schemas/TokenType"

      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Transaction credited
                  creditedTransaction:
                    "$ref": "#/components/schemas/CreditedPaymentTx"

        "202":
          description: Accepted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Transaction pending
                  pendingTransaction:
                    "$ref": "#/components/schemas/PendingPaymentTx"

        "400":
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
                description: "Error message string dependent on cause"
                example: "Transaction ID is invalid!"

            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Transaction has already failed!
                  failedTransaction:
                    "$ref": "#/components/schemas/FailedPaymentTx"

        "404":
          description: Not Found
          content:
            text/plain:
              schema:
                type: string
                default: "Transaction ID not found!"

        "503":
          description: Service Unavailable
          content:
            text/plain:
              schema:
                type: string
                default: "Error while processing transaction!"

  /account/approvals:
    get:
      tags:
        - Approvals
      summary: Get credit share approvals for a given payingAddress and approvedAddress
      description: Get credit share approvals for a given payingAddress and approvedAddress

      parameters:
        - name: payingAddress
          in: query
          required: true
          schema:
            type: string
            description: Paying wallet address

        - name: approvedAddress
          in: query
          required: true
          schema:
            type: string
            description: Approved wallet address

      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  approvals:
                    "$ref": "#/components/schemas/CreditShareApprovals"
                  amount:
                    type: string
                    example: "332824926"
                    description: Total amount of remaining approved winc for the given payingAddress and approvedAddress
                  expiresBy:
                    type: number
                    example: 123456789
                    description: The unix timestamp of the earliest expiration date on the approval

        "400":
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
                description: "Error message string dependent on cause"
                example: "Invalid paying address!"

        "503":
          description: Service Unavailable
          content:
            text/plain:
              schema:
                type: string
                default: "Internal server error"

  /account/approvals/get:
    get:
      tags:
        - Approvals
      summary: Get all credit share approvals for a given payingAddress and approvedAddress
      description: Get all credit share approvals for a given userAddress

      parameters:
        - name: userAddress
          in: query
          required: true
          schema:
            type: string
            description: Paying wallet address

      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  givenApprovals:
                    "$ref": "#/components/schemas/CreditShareApprovals"
                  receivedApprovals:
                    "$ref": "#/components/schemas/CreditShareApprovals"

        "400":
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
                description: "Error message string dependent on cause"
                example: "Invalid paying address!"

        "503":
          description: Service Unavailable
          content:
            text/plain:
              schema:
                type: string
                default: "Internal server error"

  /x402/price/{signatureType}/{address}:
    get:
      tags:
        - x402
      summary: Get x402 payment requirements for upload
      description: |
        Returns payment requirements for uploading data of a given size. This is the first step in the x402 payment flow.

        **IMPORTANT: Per x402 standard, this endpoint returns 200 OK (not 402).**
        The actual 402 Payment Required response happens at the protected resource (upload endpoint at /v1/tx).

        **Three-Phase x402 Flow:**
        1. **Price Quote** (this endpoint): Client gets payment requirements → 200 OK with requirements
        2. **Upload Attempt**: Client uploads to /v1/tx without payment → 402 Payment Required
        3. **Paid Upload**: Client uploads to /v1/tx with X-PAYMENT header → 200 OK with receipt

        **Content Negotiation:**
        - **API clients** (Accept: application/json): Receive JSON payment requirements for programmatic use
        - **Browser clients** (Accept: text/html): Receive interactive HTML paywall (if X_402_CDP_CLIENT_KEY configured)

        **Browser Paywall Features** (when X_402_CDP_CLIENT_KEY environment variable is set):
        - Interactive payment authorization UI with wallet connection
        - MetaMask integration for EIP-712 signature generation
        - Coinbase Onramp widget for purchasing USDC if user lacks funds
        - Automatic base64 encoding of payment authorization
        - Copy-to-clipboard functionality for X-PAYMENT header value

        **Pricing Calculation:**
        - Converts byte count → Winston (Arweave storage cost)
        - Adds pricing buffer (default 5%) for volatility protection
        - Converts Winston → USD → USDC (6 decimals)
        - Returns maxAmountRequired in USDC smallest unit

        **Supported Networks:** base-sepolia, base-mainnet (configurable via X402_NETWORKS)

      parameters:
        - name: signatureType
          in: path
          required: true
          schema:
            type: integer
            description: |
              ANS-104 signature type for the data item:
              - 1: Arweave (RSA-PSS with SHA-256)
              - 3: Ethereum (ECDSA secp256k1)
              - 4: Solana (Ed25519)
            enum: [1, 3, 4]
            example: 3

        - name: address
          in: path
          required: true
          schema:
            type: string
            description: |
              User's wallet address in format matching signatureType.
              Used for tracking and analytics (not for payment verification).
            example: "0x742d35Cc6634C0532925a3b844Bc9e7595f0bEb0"

        - name: bytes
          in: query
          required: true
          schema:
            type: integer
            minimum: 1
            description: |
              Number of bytes to upload (data item size).
              Used to calculate storage cost and USDC payment amount.
            example: 1024

      responses:
        "200":
          description: |
            OK - Returns x402 payment requirements (per x402 standard, price quotes return 200 not 402).

            **Response format depends on Accept header:**
            - application/json: Structured payment requirements for programmatic use
            - text/html: Interactive paywall for browser users (if X_402_CDP_CLIENT_KEY configured)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/X402PaymentRequiredResponse"
              examples:
                SingleNetwork:
                  summary: Single network (base-mainnet only)
                  value:
                    x402Version: 1
                    accepts:
                      - scheme: "exact"
                        network: "base-mainnet"
                        maxAmountRequired: "1000000"
                        resource: "/v1/tx"
                        description: "Upload 1024 bytes to Arweave via AR.IO Bundler"
                        mimeType: "application/json"
                        outputSchema:
                          type: "object"
                          properties:
                            id:
                              type: "string"
                              description: "Data item ID"
                            timestamp:
                              type: "number"
                              description: "Upload timestamp"
                            x402Payment:
                              type: "object"
                              description: "x402 payment details"
                        payTo: "0x6A0A10FFD285c971B841bee8892878c0d583Bf67"
                        maxTimeoutSeconds: 300
                        asset: "0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913"
                        extra:
                          name: "USD Coin"
                          version: "2"
                MultipleNetworks:
                  summary: Multiple networks enabled
                  value:
                    x402Version: 1
                    accepts:
                      - scheme: "exact"
                        network: "base-mainnet"
                        maxAmountRequired: "1000000"
                        resource: "/v1/tx"
                        description: "Upload 1024 bytes to Arweave via AR.IO Bundler"
                        mimeType: "application/json"
                        payTo: "0x6A0A10FFD285c971B841bee8892878c0d583Bf67"
                        maxTimeoutSeconds: 300
                        asset: "0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913"
                        extra:
                          name: "USD Coin"
                          version: "2"
                      - scheme: "exact"
                        network: "base-sepolia"
                        maxAmountRequired: "1000000"
                        resource: "/v1/tx"
                        description: "Upload 1024 bytes to Arweave via AR.IO Bundler"
                        mimeType: "application/json"
                        payTo: "0x6A0A10FFD285c971B841bee8892878c0d583Bf67"
                        maxTimeoutSeconds: 300
                        asset: "0x036CbD53842c5426634e7929541eC2318f3dCF7e"
                        extra:
                          name: "USD Coin"
                          version: "2"
            text/html:
              schema:
                type: string
                description: |
                  Interactive HTML paywall (only for browser clients when X_402_CDP_CLIENT_KEY is configured).

                  **Features:**
                  - MetaMask wallet connection
                  - EIP-712 payment authorization signing
                  - Coinbase Onramp for purchasing USDC
                  - Copy X-PAYMENT header to clipboard
                  - Automatic retry with payment

                  **When shown:** Accept: text/html AND User-Agent contains "Mozilla" AND X_402_CDP_CLIENT_KEY env var is set
              example: |
                <!DOCTYPE html>
                <html>
                  <head>
                    <title>AR.IO Bundler - Payment Required</title>
                    <script src="https://cdn.onramp.money/main.js"></script>
                  </head>
                  <body>
                    <h1>Payment Required</h1>
                    <p>Upload Cost: <strong>0.001000 USDC</strong> on <strong>Base</strong></p>
                    <button id="connect-wallet">Connect Wallet & Authorize Payment</button>
                    <button id="buy-usdc">Don't have USDC? Buy some first</button>
                    <div id="payment-result" style="display:none;">
                      <h3>Payment Authorization Ready</h3>
                      <pre id="payment-header"></pre>
                      <button id="copy-payment">Copy X-PAYMENT Header</button>
                    </div>
                  </body>
                </html>

        "400":
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
                example: "Invalid byte count"

        "503":
          description: Service Unavailable
          content:
            text/plain:
              schema:
                type: string
                example: "Pricing oracle unavailable"

  /x402/payment/{signatureType}/{address}:
    post:
      tags:
        - x402
      summary: Verify and settle x402 payment
      description: |
        Verifies an EIP-3009 payment authorization and settles payment on-chain according to the specified mode.

        **This is Phase 2 of the x402 flow** - verifying and settling the payment.

        **Process:**
        1. Decode base64 payment header to extract EIP-3009 authorization
        2. Verify EIP-712 signature matches authorization parameters
        3. Check authorization hasn't been used or expired
        4. Call USDC contract's `receiveWithAuthorization()` to settle payment
        5. Convert USDC → Winston (Arweave storage credits)
        6. Apply payment according to mode (payg, topup, or hybrid)
        7. Record transaction in database with payment ID
        8. Return success with transaction hash for verification

        **Payment Modes:**
        - **payg** (Pay-as-you-go): Payment reserved for specific upload only
        - **topup**: Entire payment amount credited to user's account balance
        - **hybrid**: Reserve for upload + credit any excess to balance (DEFAULT)

        **Security:**
        - EIP-712 signature verification prevents unauthorized transfers
        - Nonce prevents replay attacks
        - validBefore/validAfter enforce time bounds
        - On-chain settlement provides cryptographic proof

        **Called by:** Upload service during data item upload when X-PAYMENT header is present

      parameters:
        - name: signatureType
          in: path
          required: true
          schema:
            type: integer
            description: ANS-104 signature type (1=Arweave, 3=Ethereum, 4=Solana)
            enum: [1, 3, 4]
            example: 3

        - name: address
          in: path
          required: true
          schema:
            type: string
            description: User's wallet address (used for tracking, not payment verification)
            example: "0x742d35Cc6634C0532925a3b844Bc9e7595f0bEb0"

      requestBody:
        required: true
        description: |
          Payment authorization details extracted from X-PAYMENT header.

          The upload service extracts this from the user's X-PAYMENT header and forwards it
          to the payment service for verification and settlement.
        content:
          application/json:
            schema:
              type: object
              required:
                - paymentHeader
                - byteCount
              properties:
                paymentHeader:
                  type: string
                  format: byte
                  description: |
                    Base64-encoded x402 payment authorization (same value from X-PAYMENT header).

                    **Decodes to JSON with:**
                    - x402Version: 1
                    - scheme: "exact"
                    - network: "base-mainnet" or "base-sepolia"
                    - payload:
                      - signature: EIP-712 signature of authorization
                      - authorization:
                        - from: Payer's Ethereum address
                        - to: Recipient address (service's Ethereum wallet)
                        - value: USDC amount in smallest unit (6 decimals)
                        - validAfter: Unix timestamp
                        - validBefore: Unix timestamp
                        - nonce: Unique nonce (bytes32)
                  example: "eyJ4NDAyVmVyc2lvbiI6MSwic2NoZW1lIjoiZXhhY3QiLCJuZXR3b3JrIjoiYmFzZS1tYWlubmV0IiwicGF5bG9hZCI6eyJzaWduYXR1cmUiOiIweGFiY2RlZi4uLiIsImF1dGhvcml6YXRpb24iOnsiZnJvbSI6IjB4NzQyZDM1Q2M2NjM0QzA1MzI5MjVhM2I4NDRCYzllNzU5NWYwYkViMCIsInRvIjoiMHg2QTBBMTBGZUQ4NWM5NzFCODQxYmVlODg5Mjg3OGMwZDU4M0JmNjciLCJ2YWx1ZSI6IjEwMDAwMDAiLCJ2YWxpZEFmdGVyIjowLCJ2YWxpZEJlZm9yZSI6MTczNTY4OTYwMCwibm9uY2UiOiIweDEyMzQ1Njc4OTBhYmNkZWYuLi4ifX19"
                dataItemId:
                  type: string
                  description: |
                    Data item ID being uploaded (optional for PAYG mode).

                    For PAYG mode, this can be provided later via link endpoint.
                    For hybrid mode, this is required upfront.
                  example: "QpmY8mZmFEC8RxNsgbxSV6e36OF6quIYaPRKzvUco0o"
                byteCount:
                  type: integer
                  minimum: 1
                  description: |
                    Declared byte count for the upload (required for PAYG and hybrid modes).

                    Used to calculate Winston cost and determine if payment is sufficient.
                    Must match Content-Length header from upload request.
                  example: 1024
                mode:
                  type: string
                  description: |
                    Payment mode - determines how payment is applied.

                    **payg**: Payment reserved for this specific upload only
                    **topup**: Entire payment credited to account balance
                    **hybrid**: Reserve for upload + credit excess (DEFAULT)

                    Most x402 clients use "payg" for stateless pay-per-upload.
                  enum: [payg, topup, hybrid]
                  default: hybrid
                  example: "payg"
            examples:
              PaygMode:
                summary: Pay-as-you-go (most common for x402)
                value:
                  paymentHeader: "eyJ4NDAyVmVyc2lvbiI6MSwic2NoZW1lIjoiZXhhY3QiLCJuZXR3b3JrIjoiYmFzZS1tYWlubmV0IiwicGF5bG9hZCI6ey4uLn19"
                  dataItemId: "QpmY8mZmFEC8RxNsgbxSV6e36OF6quIYaPRKzvUco0o"
                  byteCount: 1024
                  mode: "payg"
              HybridMode:
                summary: Hybrid (reserve + credit excess)
                value:
                  paymentHeader: "eyJ4NDAyVmVyc2lvbiI6MSwic2NoZW1lIjoiZXhhY3QiLCJuZXR3b3JrIjoiYmFzZS1tYWlubmV0IiwicGF5bG9hZCI6ey4uLn19"
                  dataItemId: "QpmY8mZmFEC8RxNsgbxSV6e36OF6quIYaPRKzvUco0o"
                  byteCount: 1024
                  mode: "hybrid"

      responses:
        "200":
          description: Payment verified and settled successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/X402PaymentResult"

        "402":
          description: Payment verification failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/X402PaymentResult"

        "400":
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
                example: "Invalid payment header"

        "503":
          description: Service Unavailable
          content:
            text/plain:
              schema:
                type: string
                example: "Payment service unavailable"

  /x402/finalize:
    post:
      tags:
        - x402
      summary: Finalize x402 payment after upload
      description: |
        Finalizes an x402 payment after upload completes by comparing declared vs actual byte count.

        **This is Phase 3 of the x402 flow** - fraud detection and finalization.

        **Called by:** Upload service after data item is fully received and validated.

        **Process:**
        1. Retrieve payment record by data item ID
        2. Compare actualByteCount vs declaredByteCount (from X-PAYMENT)
        3. Apply fraud tolerance threshold (default 5%)
        4. Determine status: confirmed, refunded, or fraud_penalty
        5. Issue refund if overpaid (actual < declared)
        6. Keep payment as penalty if underpaid (actual > declared + tolerance)
        7. Update payment record with final status

        **Fraud Detection:**
        - **Within tolerance**: Payment confirmed, upload proceeds
        - **Overpayment** (actual < declared - 5%): Refund difference to user
        - **Fraud** (actual > declared + 5%): Keep payment as penalty, reject upload

        **Why this matters:**
        Users must provide Content-Length header accurately. If they lie about upload size
        to pay less, the system detects this and penalizes them by keeping the payment.

        **Security:** Prevents users from declaring small uploads but uploading large data.

      requestBody:
        required: true
        description: Actual upload details after data item has been fully received
        content:
          application/json:
            schema:
              type: object
              required:
                - dataItemId
                - actualByteCount
              properties:
                dataItemId:
                  type: string
                  description: Data item ID that was uploaded (links to payment record)
                  example: "QpmY8mZmFEC8RxNsgbxSV6e36OF6quIYaPRKzvUco0o"
                actualByteCount:
                  type: integer
                  minimum: 1
                  description: |
                    Actual byte count after upload completed and data item validated.

                    This is the true size of the ANS-104 data item (headers + payload).
                    Compared against declaredByteCount from payment verification phase.
                  example: 1024
            examples:
              MatchingSize:
                summary: Actual matches declared (within tolerance)
                value:
                  dataItemId: "QpmY8mZmFEC8RxNsgbxSV6e36OF6quIYaPRKzvUco0o"
                  actualByteCount: 1024
              Overpayment:
                summary: Actual less than declared (refund issued)
                value:
                  dataItemId: "QpmY8mZmFEC8RxNsgbxSV6e36OF6quIYaPRKzvUco0o"
                  actualByteCount: 900
              FraudAttempt:
                summary: Actual exceeds declared (fraud penalty)
                value:
                  dataItemId: "QpmY8mZmFEC8RxNsgbxSV6e36OF6quIYaPRKzvUco0o"
                  actualByteCount: 1200

      responses:
        "200":
          description: Payment finalized successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/X402FinalizeResult"

        "404":
          description: Payment not found
          content:
            text/plain:
              schema:
                type: string
                example: "Payment not found for data item"

        "503":
          description: Service Unavailable
          content:
            text/plain:
              schema:
                type: string
                example: "Payment service unavailable"

  /info:
    get:
      tags:
        - Info
      summary: Get service information
      description: Get the current version of the service and the addresses for the supported blockchains

      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  version:
                    type: string
                    example: 0.2.0
                  addresses:
                    type: object
                    properties:
                      arweave:
                        type: string
                        example: JNC6vBhjHY1EPwV3pEeNmrsgFMxH5d38_LHsZ7jful8
                      ethereum:
                        type: string
                        example: 0x6A0A10FFD285c971B841bee8892878c0d583Bf67
                      solana:
                        type: string
                        example: HepiT2k93CFQaSB7i3ZNXhybZKn5MeWiv3UkLsaJKk4i
                      matic:
                        type: string
                        example: 0x6A0A10FFD285c971B841bee8892878c0d583Bf67
                      kyve:
                        type: string
                        example: kyve1clmuh5sjw73784lg0gnf4p07qefzrtk78an698
                  gateway:
                    type: string
                    example: https://arweave.net/
