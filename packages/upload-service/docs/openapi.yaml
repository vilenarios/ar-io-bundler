openapi: 3.1.1
info:
  title: Turbo Upload Service
  # TODO: inject as env var in CI to match package.json
  version: 0.1.0
  description: The Turbo Upload Service supports posting signed data-items to Arweave.net using Turbo Credits.

servers:
  - url: https://upload.ardrive.io
    description: Production server for Turbo Upload Service
  - url: /v1
    description: v1 API base path for new implementations
  - url: /
    description: Root path for backwards compatibility

tags:
  - name: Service Info
    description: Service information and health endpoints
  - name: Pricing
    description: Pricing calculation endpoints
  - name: Account
    description: Account balance and wallet information
  - name: Upload
    description: Data item upload endpoints (single and multi-part)
  - name: Transaction Data
    description: Transaction status and metadata retrieval

components:
  parameters:
    byteCount:
      name: byteCount
      in: path
      description: The byte count of the data item.
      required: true
      schema:
        type: integer
        example: 1000
    token:
      name: token
      in: path
      description: The token to use for validating the transaction.
      required: true
      schema:
        type: string
        enum:
          - arweave
          - ethereum
          - solana
    id:
      name: id
      in: path
      required: true
      schema:
        type: string
        description: A data item id.
        example: "QpmY8mZmFEC8RxNsgbxSV6e36OF6quIYaPRKzvUco0o"
    uploadId:
      name: uploadId
      in: path
      description: The upload id of the multi-part upload.
      required: true
      schema:
        type: string
        example: "QpmY8mZmFEC8RxNsgbxSV6e36OF6quIYaPRKzvUco0o"
    chunkOffset:
      name: chunkOffset
      in: path
      description: The offset of the chunk in bytes. If -1, that will finalize an existing multi-part upload.
      required: true
      schema:
        type: integer
        example: 0

    content-length:
      name: content-length
      in: header
      required: false
      schema:
        type: integer
        format: int64
        maximum: 2147483648 # 2GiB

    content-type:
      name: content-type
      in: header
      required: false
      schema:
        type: string
        enum:
          - application/octet-stream

    x-payment:
      name: X-PAYMENT
      in: header
      required: false
      description: |
        Base64-encoded x402 payment authorization for pay-as-you-go USDC payments.

        **x402 Payment Flow:**
        1. Upload without X-PAYMENT â†’ Server returns 402 with payment requirements
        2. Client creates EIP-3009 authorization and signs with EIP-712
        3. Client retries upload with X-PAYMENT header containing base64(JSON)
        4. Server verifies signature, settles USDC transfer, processes upload
        5. Server returns receipt with x402Payment object and X-Payment-Response header

        **Requirements:**
        - Must be base64-encoded JSON with x402Version, scheme, network, and payload
        - Payload must contain EIP-3009 authorization: from, to, value, validAfter, validBefore, nonce
        - Payload must contain EIP-712 signature of the authorization
        - Content-Length header MUST be present (for fraud detection)

        **Supported Networks:** base-sepolia, base-mainnet

        **Standards:**
        - x402 Protocol: https://github.com/coinbase/x402
        - EIP-3009: TransferWithAuthorization (gasless USDC transfers)
        - EIP-712: Typed structured data signing
      schema:
        type: string
        format: byte
        example: "eyJ4NDAyVmVyc2lvbiI6MSwic2NoZW1lIjoiZXhhY3QiLCJuZXR3b3JrIjoiYmFzZS1zZXBvbGlhIiwicGF5bG9hZCI6eyJzaWduYXR1cmUiOiIweDEyMy4uLiIsImF1dGhvcml6YXRpb24iOnsiZnJvbSI6IjB4YWJjLi4uIiwidG8iOiIweGRlZi4uLiIsInZhbHVlIjoiMTAwMDAwMCIsInZhbGlkQWZ0ZXIiOjAsInZhbGlkQmVmb3JlIjoxNzM1Njg5NjAwLCJub25jZSI6IjB4MTIzLi4uIn19fQ=="

    x-tag-custom:
      name: X-Tag-*
      in: header
      required: false
      description: |
        Custom tags for raw data uploads (server-signed mode only). Use pattern X-Tag-Name where Name becomes the tag name.
        Example: X-Tag-App-Name: MyApp creates tag {"name": "App-Name", "value": "MyApp"}

        Auto-added tags for raw uploads:
        - Bundler: Service name
        - Upload-Type: "raw-data-x402"
        - Payer-Address: Ethereum address from X-PAYMENT
        - Upload-Timestamp: Unix timestamp
        - Content-Type: From Content-Type header
        - X402-Tx-Hash: Blockchain transaction hash (if x402 payment)
        - X402-Payment-ID: Unique payment identifier UUID (if x402 payment)
        - X402-Network: Payment network e.g. "base" (if x402 payment)
      schema:
        type: string
        example: "MyApp"
  schemas:
    DataItemStatus:
      type: object
      properties:
        status:
          type: string
          description: The status of the data item.
          example: "CONFIRMED"
          enum:
            - "CONFIRMED"
            - "FINALIZED"
        bundleId:
          type: string
          description: The bundle id of the data item.
          example: "QpmY8mZmFEC8RxNsgbxSV6e36OF6quIYaPRKzvUco0o"
        startOffsetInRootBundle:
          type: integer
          description: The start offset in the root bundle tx of the raw data item.
          example: 12345
          required: false
        payloadContentType:
          type: string
          description: The content type of the data item payload.
          example: "application/json"
        payloadDataStart:
          type: integer
          description: The start offset of the payload data in the raw data item.
          example: 1024
        info:
          type: string
          description: The info of the data item.
          example: "pending"
          enum:
            - "new"
            - "pending"
            - "permanent"
        winc:
          type: string
          description: The winston price of the data item.
          example: "1000000"
    DataItemPost:
      type: object
      properties:
        id:
          type: string
          description: The id of the data item.
          example: "QpmY8mZmFEC8RxNsgbxSV6e36OF6quIYaPRKzvUco0o"
        owner:
          type: string
          description: The normalized wallet address that signed data item. For raw data uploads, this is the server's raw data item wallet (auto-whitelisted).
          example: "8wgRDgvYOrtSaWEIV21g0lTuWDUnTu4_iYj4hmA7PI0"
        payer:
          type: string
          description: The Ethereum address that paid for this upload via x402 (only present for raw data uploads, tracked in Payer-Address tag).
          example: "0x742d35Cc6634C0532925a3b844Bc9e7595f0bEb0"
        dataCaches:
          type: array
          description: The Arweave data caches the data item has been posted to.
          items:
            type: string
          example:
            - arweave.net
        fastFinalityIndexes:
          type: array
          description: The Arweave fast finality indexes the data item has been posted to.
          items:
            type: string
          example:
            - arweave.net
        deadlineHeight:
          type: integer
          description: The deadline block height for the data item to be posted to Arweave.
          example: 1310000
        timestamp:
          type: integer
          description: The timestamp in millisecond of when the data item was fully uploaded and receipt was signed.
          example: 1700590909589
        version:
          type: string
          description: The version of the receipt
          example: "0.1.0"
        signature:
          type: string
          description: The base64URL signature of the receipt. Includes id, version, timestamp, public key, deadlineHeight and owner.
          example: "iU_S6uuG1OD8k0XqMGOmbcKfysDckEMUy4R9-ODPXiQjKXuT4lTngRFBFKO5NQT1iIfqSDKcbTRL6gJowM_L7bBQZRGkojzXD0PNNU2F0bNNJ80VtUktHifGTXbCgz5kiFciL19n0P3nX6ZfXnOn-H8ALZzRJV69apdvwqitpNKxLMPyc-QA0QBxmC3CKPz_7fy2Qg0QHr5g_ZT2Of-YJ_RsZTEoc3g1fgzsEmMBPOsx4XtPrhV6llnA3pncngzHbPdFvypdWiO8Bvr0EWmazNsoanuwK5uKJ_ROIGXW_dBBGN8Vrfv5U6dJnhJVn5IE7JFlixpFTluF_ICRzbUq2pk_re6jEtW1H3ItH2iN0UeFUw1uDbq3HJW6lDc8aOwDwDspJI11KEI6uCz5QmQy2V8DvRknoqcxmuihF6XmmJIZgTVeo6LNufEis9kFxqtc3Dh_gn8z0cDXKEKFycudckmcHP7vkWD68uSssMMJIdVgwvPZss06svfRnI-E33j3MrQI9FzMIv-7Df8iYATyeyldM1v3gexG0kQm0AMG1_8_SLqwu2QlqzM41mrK5vNmQxOVdIQSOPWPvzbF-YGRwpCjlveRBuARGC9JNC4UipvDYri2gRWuBx2uDL7dmVFv1gRll3dYNMYaMULHYngtrrCynB3Cyfhh7cyPlwuNlk0"
        public:
          type: string
          description: The public key of the wallet that signed the receipt
          example: "qREovbmD6oxgHYNCzOeTei07lSz0-YLcjnvgSDzqptsCiqNOtB3RKUToSX5hkPD45fJDY4057XkkcsQRuGsU8y9rgm37i-Kiyd5Z_iy6pJXrwi9XnAgGL118lIV790GZ7xe5o3DvPV3Px74C0ABsfL9lW86D4t_qClJ6wSQksKNd7rnUImIvHW0vxLswST7dfUngevzKt4kv48VTub4951XdUHjb45Uurf7xFYSCizAGtGqr5GYDFrVk-mNrzFH5bXt06PJfxe9E5ujIE5Uq1Az6vqEOO0E1mWmXqdTPluAxcjmgktkoNLHZnnU-BsYuFaTWW5NU3aS-RgJKXYs9O6Dc1-2SITl-H_wtdGNSj31fj72UkaAbkpA1mionK-8bOIkSpYgKCyTC42oHh1Fw4SLXPyLxBj1w6F32LSLjpse5dmKymj4fJPezCMdi709uIiVT7XOm4LZBCzFOxS6-UNxgE57dBFpcWkcqNO3p00biYqH5d5bzvK3bwd-4j0KyKlqPYTProSnd3P6ROZuuJaLoLD_Or5-L_dUjawHz-DFlzmckYaf8l3XdzPM4JSsE8CEDZl0NCN0AidXt_wjbr6k9JsO7cnLB226AjxhcyuxZOlhgkIn7EbxpVXx-O2mXkcXF8PixCP0k5brtriLeF1MAdspgd_S-LKQeGVr7-mk"
        x402Payment:
          type: object
          description: |
            x402 payment information - present when upload was paid via X-PAYMENT header.

            Contains blockchain transaction details for verification and audit trail.
            The payment is settled on-chain via EIP-3009 USDC transfer before upload completes.
          properties:
            paymentId:
              type: string
              format: uuid
              description: Unique payment identifier (UUID) for tracking and reconciliation
              example: "550e8400-e29b-41d4-a716-446655440000"
            transactionHash:
              type: string
              description: |
                Blockchain transaction hash for the USDC transfer.
                Can be verified on block explorer (e.g., BaseScan for Base network).
              example: "0xb8a52725cdc816d060392dcecaa1528872acf9ea0bd097a86e2432dd5d2213ca"
            network:
              type: string
              description: Network where payment was settled
              enum: [base-sepolia, base-mainnet]
              example: "base-mainnet"
            mode:
              type: string
              enum: [payg, topup, hybrid]
              description: |
                Payment mode (currently always "payg" for x402):
                - payg: Pay-as-you-go (payment covers only this specific upload)
                - topup: Credit account balance (currently not used for x402)
                - hybrid: Reserve for upload + credit excess (currently not used for x402)
              example: "payg"
    CreateMultipartUpload:
      type: object
      properties:
        id:
          type: string
          description: The id of the multi-part upload.
          example: "QpmY8mZmFEC8RxNsgbxSV6e36OF6quIYaPRKzvUco0o"
        min:
          type: number
          description: The minimum chunk size allowed in bytes (e.g. 25KB)
          example: 2500
        max:
          type: number
          description: The maximum chunk size allowed in bytes (e.g. 500MB)
          example: 500_000_000
    InFlightMultipartUpload:
      type: object
      properties:
        id:
          type: string
          description: The id of the multi-part upload.
          example: "QpmY8mZmFEC8RxNsgbxSV6e36OF6quIYaPRKzvUco0o"
        min:
          type: number
          description: The minimum chunk size allowed in bytes (e.g. 25KB)
          example: 2500
        max:
          type: number
          description: The maximum chunk size allowed in bytes (e.g. 500MB)
          example: 500000000
        size:
          type: number
          description: The chunk size for the multi-part upload in bytes. (e.g. 25MB)
          example: 25000000
        chunks:
          type: array
          description: A multi-dimensional array containing the chunk offset and chunk size (e.g. [chunkOffset, chunkSize] for each chunk that has been uploaded for the respective upload id, sorted in ascending order respective to the chunk offset.
          example:
            [
              [25000000, 25000000],
              [50000000, 25000000],
              [75000000, 25000000],
              [100000000, 4858676],
            ]
    CompleteMultipartUpload:
      type: object
      properties:
        id:
          type: string
          description: The id of the multi-part upload.
          example: "QpmY8mZmFEC8RxNsgbxSV6e36OF6quIYaPRKzvUco0o"
        data:
          $ref: "#/components/schemas/DataItemPost"
    ServiceInfo:
      type: object
      properties:
        version:
          type: string
          description: The version of the service
          example: "0.1.0"
        gateway:
          type: string
          description: The gateway address of the service
          example: https://arweave.net
        addresses:
          type: object
          description: The wallet addresses of the service
          properties:
            arweave:
              type: string
              description: The Arweave wallet address of the service
              example: "8wgRDgvYOrtSaWEIV21g0lTuWDUnTu4_iYj4hmA7PI0"
            ethereum:
              type: string
              description: The Ethereum wallet address of the service
              example: "0x8wgRDgvYOrtSaWEIV21g0lTuWDUnTu4_iYj4hmA7PI0"
            solana:
              type: string
              description: The Solana wallet address of the service
              example: "8wgRDgvYOrtSaWEIV21g0lTuWDUnTu4_iYj4hmA7PI0"
            matic:
              type: string
              description: The Matic wallet address of the service
              example: "0x8wgRDgvYOrtSaWEIV21g0lTuWDUnTu4_iYj4hmA7PI0"
    OffsetsInfo:
      type: object
      properties:
        rootBundleId:
          type: string
          description: The bundle id of the data item.
          example: "J40R1BgFSI1_7p25QW49T7P46BePJJnlDrsFGY1YWbM"
        startOffsetInRootBundle:
          type: integer
          description: The start offset in the root bundle tx of the raw data item.
          example: 12345
          required: false
        parentDataItemId:
          type: string
          description: The parent data item id of the data item.
          example: "QpmY8mZmFEC8RxNsgbxSV6e36OF6quIYaPRKzvUco0o"
          required: false
        startOffsetInParentDataItemPayload:
          type: integer
          description: The start offset in the parent data item payload of the raw data item.
          example: 12345
          required: false
        rawContentLength:
          type: integer
          description: The length of the raw data item (i.e. headers and payload).
          example: 123456
        payloadContentType:
          type: string
          description: The content type of the data item payload.
          example: "application/json"
        payloadDataStart:
          type: integer
          description: The start offset of the payload data in the raw data item.
          example: 1024

paths:
  /:
    servers:
      - url: /
    get:
      summary: Gets the info of the service
      tags:
        - Service Info
      responses:
        "200":
          description: The info of the service
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceInfo"
  /info:
    servers:
      - url: /
    get:
      summary: Gets the info of the service
      tags:
        - Service Info
      responses:
        "200":
          description: The info of the service
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceInfo"
  /price/:token/:byteCount:
    servers:
      - url: /
    get:
      summary: Gets the price in winc to upload a data item
      tags:
        - Pricing
      parameters:
        - $ref: "#/components/parameters/token"
        - name: byteCount
          in: path
          description: The byte count of the data item.
          required: true
          schema:
            type: integer
            example: 1000
      responses:
        "200":
          description: The price of the data item
          content:
            text/plain:
              schema:
                type: string
              examples:
                Price:
                  value: 1000000
        "400":
          description: Invalid byte count
          content:
            text/plain:
              schema:
                type: string
              examples:
                InvalidByteCount:
                  value: Invalid byte count
  /price/:token:
    servers:
      - url: /
    get:
      summary: Gets the price in winc to upload a data item
      tags:
        - Pricing
      parameters:
        - $ref: "#/components/parameters/token"
      responses:
        "200":
          description: The price of the data item
          content:
            text/plain:
              schema:
                type: string
              examples:
                Price:
                  value: 1000000
        "400":
          description: Invalid byte count
          content:
            text/plain:
              schema:
                type: string
              examples:
                InvalidByteCount:
                  value: Invalid byte count
  /account/balance/:id:
    servers:
      - url: /
    get:
      summary: Gets the balance of a wallet
      tags:
        - Account
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        "200":
          description: The balance of the wallet
          content:
            text/plain:
              schema:
                type: string
              examples:
                Balance:
                  value: 1000000
        "404":
          description: Not found
          content:
            text/plain:
              schema:
                type: string
                example: Not found
        "503":
          description: Internal server error
          content:
            text/plain:
              schema:
                type: string
                example: Internal server error
  /tx:
    servers:
      - url: /v1
      - url: /
    parameters:
      - $ref: "#/components/parameters/content-length"
      - $ref: "#/components/parameters/content-type"
      - $ref: "#/components/parameters/x-payment"
      - $ref: "#/components/parameters/x-tag-custom"

    post:
      summary: Posts a signed ANS-104 data item OR raw data to Arweave
      description: |
        **Two Upload Modes:**

        **1. Traditional ANS-104 Upload (Client-Signed)**

        Client creates and signs ANS-104 data item before uploading. The service detects ANS-104 format by checking the first 2 bytes (signature type 1-8).

        Payment options:
        - Traditional balance (user has pre-loaded credits)
        - x402 payment (include X-PAYMENT header with EIP-3009 authorization)

        **2. Raw Data Upload (Server-Signed, x402 Only)**

        Simplified flow for AI agents and applications without ANS-104 signing capabilities. Requires RAW_DATA_UPLOADS_ENABLED=true on server.

        The service automatically detects raw data (non-ANS-104) and:
        - Returns 402 Payment Required if no X-PAYMENT header provided
        - Creates and signs ANS-104 data item server-side using RAW_DATA_ITEM_JWK wallet
        - Adds attribution tags: Bundler, Upload-Type, Payer-Address, Upload-Timestamp, Content-Type
        - Validates x402 payment against payer's Ethereum address (not the signer)
        - Returns response with both `owner` (server wallet) and `payer` (Ethereum address) fields

        Request formats for raw data:
        - Binary upload with X-Tag-* headers for custom tags
        - JSON envelope: `{"data": "<base64>", "contentType": "...", "tags": [...]}`

        When using X-PAYMENT header, Content-Length must be present to enable fraud detection.
      tags:
        - Upload
      requestBody:
        required: true
        description: A signed ANS-104 data item (binary) OR raw data (binary/JSON envelope for server-signing)
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
              description: Traditional ANS-104 data item (client-signed)
          application/json:
            schema:
              type: object
              description: Raw data upload envelope (server-signed, x402 only)
              properties:
                data:
                  type: string
                  format: byte
                  description: Base64-encoded raw data
                  example: "SGVsbG8gV29ybGQh"
                contentType:
                  type: string
                  description: MIME type of the data
                  example: "text/plain"
                tags:
                  type: array
                  description: Custom tags to add to the data item
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                        example: "App-Name"
                      value:
                        type: string
                        example: "MyApp"

      responses:
        "200":
          description: The signed data item was successfully submitted to and indexed on Arweave.
          headers:
            X-Payment-Response:
              schema:
                type: string
                format: byte
              description: |
                Base64-encoded x402 payment response (present only if upload was paid via X-PAYMENT header).

                **Decodes to JSON with:**
                - paymentId: UUID for tracking
                - txHash: Blockchain transaction hash (verify on block explorer)
                - network: Payment network (e.g., "base-mainnet")
                - mode: Payment mode (currently always "payg")

                **Example (decoded):**
                ```json
                {
                  "paymentId": "550e8400-e29b-41d4-a716-446655440000",
                  "transactionHash": "0xb8a52725cdc816d060392dcecaa1528872acf9ea0bd097a86e2432dd5d2213ca",
                  "network": "base-mainnet",
                  "mode": "payg"
                }
                ```

                **Per x402 standard:** This header provides payment confirmation and can be used by clients
                to verify the payment was successfully settled on-chain.
              example: "eyJwYXltZW50SWQiOiI1NTBlODQwMC1lMjliLTQxZDQtYTcxNi00NDY2NTU0NDAwMDAiLCJ0cmFuc2FjdGlvbkhhc2giOiIweGI4YTUyNzI1Y2RjODE2ZDA2MDM5MmRjZWNhYTE1Mjg4NzJhY2Y5ZWEwYmQwOTdhODZlMjQzMmRkNWQyMjEzY2EiLCJuZXR3b3JrIjoiYmFzZS1tYWlubmV0IiwibW9kZSI6InBheWcifQ=="
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/DataItemPost"
              examples:
                SignedUploadWithX402:
                  summary: ANS-104 upload paid with x402
                  description: |
                    Traditional signed ANS-104 data item upload paid via x402 USDC payment.
                    Client signs data item with their wallet, includes X-PAYMENT header with USDC authorization.
                  value:
                    id: "QpmY8mZmFEC8RxNsgbxSV6e36OF6quIYaPRKzvUco0o"
                    timestamp: 1700590909589
                    version: "0.2.0"
                    owner: "0x742d35Cc6634C0532925a3b844Bc9e7595f0bEb0"
                    deadlineHeight: 1310000
                    dataCaches: ["arweave.net"]
                    fastFinalityIndexes: ["arweave.net"]
                    winc: "1000000"
                    signature: "iU_S6uuG1OD8k0XqMGOmbcKfysDckEMUy4R9-ODPXiQj..."
                    public: "qREovbmD6oxgHYNCzOeTei07lSz0-YLcjnvgSDzqpts..."
                    x402Payment:
                      paymentId: "550e8400-e29b-41d4-a716-446655440000"
                      transactionHash: "0xb8a52725cdc816d060392dcecaa1528872acf9ea0bd097a86e2432dd5d2213ca"
                      network: "base-mainnet"
                      mode: "payg"
                RawDataUploadWithX402:
                  summary: Raw data upload (server-signed) with x402
                  description: |
                    Simplified flow for AI agents - raw data uploaded, server creates ANS-104 data item.
                    Requires X-PAYMENT header. Owner is server wallet, payer is Ethereum address from payment.
                  value:
                    id: "ZpmY8mZmFEC8RxNsgbxSV6e36OF6quIYaPRKzvUcp1q"
                    timestamp: 1700590909589
                    version: "0.2.0"
                    owner: "8wgRDgvYOrtSaWEIV21g0lTuWDUnTu4_iYj4hmA7PI0"
                    payer: "0x742d35Cc6634C0532925a3b844Bc9e7595f0bEb0"
                    deadlineHeight: 1310000
                    dataCaches: ["arweave.net"]
                    fastFinalityIndexes: ["arweave.net"]
                    winc: "1000000"
                    signature: "jV_T7vvH2PE9l1YrNHPncLgzteEflFNVz5S0-PEQYjRk..."
                    public: "rSFpwcmE7pyfTmt1qJWYoVWnR5yX1nt0-ZMdkjpXmqt..."
                    x402Payment:
                      paymentId: "660f9511-f3ac-52e5-b827-557766551111"
                      transactionHash: "0xc9b63836dde927e171504fa1539ecbb1e3c9dc8c1cd208c7c5c9fb5c3344eddb"
                      network: "base-mainnet"
                      mode: "payg"
        "202":
          description: Data item has already been posted to this service.
          content:
            text/plain:
              schema:
                type: string
              examples:
                DataItemExists:
                  value: Data Item Exists

        "402":
          description: |
            Payment Required - No balance available, x402 payment needed.

            **This is the standard x402-compliant 402 response** that enables automatic payment
            with x402-fetch and other x402 standard clients.

            **Response Flow:**
            1. Client uploads without payment â†’ Receives this 402 response
            2. Client extracts payment requirements from response body
            3. Client creates EIP-3009 authorization and signs with EIP-712
            4. Client retries upload with X-PAYMENT header
            5. Server processes payment and accepts upload

            **For browser clients:** If Accept header includes "text/html", the payment service
            may return an interactive HTML paywall with MetaMask integration and Coinbase Onramp.
          headers:
            X-Payment-Required:
              schema:
                type: string
              description: x402 protocol version identifier
              example: "x402-1"
          content:
            application/json:
              schema:
                type: object
                required:
                  - x402Version
                  - accepts
                properties:
                  x402Version:
                    type: integer
                    description: x402 protocol version (currently 1)
                    example: 1
                  accepts:
                    type: array
                    description: Array of accepted payment methods (may include multiple networks)
                    items:
                      type: object
                      required:
                        - scheme
                        - network
                        - maxAmountRequired
                        - resource
                        - description
                        - mimeType
                        - payTo
                        - maxTimeoutSeconds
                        - asset
                      properties:
                        scheme:
                          type: string
                          description: Payment scheme identifier
                          enum: ["exact"]
                          example: "exact"
                        network:
                          type: string
                          description: Blockchain network identifier
                          enum: ["base-sepolia", "base-mainnet"]
                          example: "base-mainnet"
                        maxAmountRequired:
                          type: string
                          description: |
                            Maximum USDC payment required in smallest unit (6 decimals).
                            Example: "1000000" = 1.00 USDC
                          example: "1000000"
                        resource:
                          type: string
                          description: The resource URL being paid for (this upload endpoint)
                          example: "/v1/tx"
                        description:
                          type: string
                          description: Human-readable description of what the payment is for
                          example: "Upload 1024 bytes to Arweave via AR.IO Bundler"
                        mimeType:
                          type: string
                          description: Expected MIME type of successful response
                          example: "application/json"
                        outputSchema:
                          type: object
                          description: JSON schema describing the successful response structure
                        payTo:
                          type: string
                          description: Recipient Ethereum address for USDC payment
                          example: "0x6A0A10FFD285c971B841bee8892878c0d583Bf67"
                        maxTimeoutSeconds:
                          type: integer
                          description: Maximum time in seconds before authorization expires
                          example: 300
                        asset:
                          type: string
                          description: EIP-3009 compliant USDC contract address on the specified network
                          example: "0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913"
                        extra:
                          type: object
                          description: Additional metadata about the payment asset (for EIP-712 domain)
                          properties:
                            name:
                              type: string
                              description: Token name for EIP-712 domain
                              example: "USD Coin"
                            version:
                              type: string
                              description: EIP-712 domain version for USDC contract
                              example: "2"
                  error:
                    type: string
                    description: Optional error message providing additional context
                    example: "Insufficient balance"
              examples:
                NoBalanceX402Required:
                  summary: Standard 402 response for x402 payment
                  value:
                    x402Version: 1
                    accepts:
                      - scheme: "exact"
                        network: "base-mainnet"
                        maxAmountRequired: "1000000"
                        resource: "/v1/tx"
                        description: "Upload 1024 bytes to Arweave via AR.IO Bundler"
                        mimeType: "application/json"
                        payTo: "0x6A0A10FFD285c971B841bee8892878c0d583Bf67"
                        maxTimeoutSeconds: 300
                        asset: "0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913"
                        extra:
                          name: "USD Coin"
                          version: "2"
                    error: "Insufficient balance"

        "400":
          description: Invalid data item post
          content:
            text/plain:
              schema:
                type: string
              examples:
                InvalidContentType:
                  value: Invalid Content Type
                MissingContentLength:
                  value: Request content has no length
                InvalidContentLength:
                  value: Data item is too large, this service only accepts data items up to 2147483648 bytes!
                InvalidDataItem:
                  value: Data item parsing error!
  /tx/:token:
    servers:
      - url: /v1
      - url: /
    post:
      summary: Posts a signed data item to arweave for a specific token
      description: |
        Uploads a signed ANS-104 data item to the bundler with token-specific handling. Payment can be handled via:
        - Traditional balance (user has pre-loaded credits)
        - x402 payment (include X-PAYMENT header with EIP-3009 authorization)

        When using X-PAYMENT header, Content-Length must be present to enable fraud detection.
      tags:
        - Upload
      parameters:
        - $ref: "#/components/parameters/token"
        - $ref: "#/components/parameters/content-length"
        - $ref: "#/components/parameters/content-type"
        - $ref: "#/components/parameters/x-payment"
      requestBody:
        required: true
        description: A signed data item
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        "200":
          description: The receipt of the uploaded data item.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DataItemPost"
        "202":
          description: Data item has already been posted to this service.
          content:
            text/plain:
              schema:
                type: string
              examples:
                DataItemExists:
                  value: Data Item Exists
        "402":
          description: Insufficient balance
          content:
            text/plain:
              schema:
                type: string
                default: "Insufficient balance"
  /tx/:id/status:
    servers:
      - url: /v1
      - url: /
    get:
      summary: Gets the status of a data item
      tags:
        - Transaction Data
      responses:
        "200":
          description: The status of the data item
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DataItemStatus"
        "404":
          description: Data item not found
          content:
            text/plain:
              schema:
                type: string
                example: "TX doesn't exist"
  /tx/:id/offsets:
    servers:
      - url: /v1
      - url: /
    get:
      summary: Gets the offsets of a data item
      tags:
        - Transaction Data
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        "200":
          description: The offsets of the data item
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OffsetsInfo"
        "404":
          description: Data item not found
          content:
            text/plain:
              schema:
                type: string
                example: "TX doesn't exist"

  /chunks/-1/-1:
    servers:
      - url: /v1
      - url: /
    get:
      summary: Creates a new multi-part upload. Chunks should be posted to /chunks/:uploadId/:chunkOffset using the returned uploadId. ARx compatible.
      tags:
        - Upload
      parameters:
        - $ref: "#/components/parameters/uploadId"
        - $ref: "#/components/parameters/chunkOffset"
      responses:
        "200":
          description: Creates a new multi-part upload. The returned upload id can then be used to send chunks.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateMultipartUpload"
        "503":
          description: Internal server error
          content:
            text/plain:
              schema:
                type: string
                example: "Internal server error"

  /chunks/:token/:uploadId/-1:
    servers:
      - url: /
    parameters:
      - $ref: "#/components/parameters/uploadId"
      - $ref: "#/components/parameters/token"
    get:
      summary: Gets an existing multi-part upload, including all existing chunks that have been uploaded. ARx compatible.
      tags:
        - Upload
      responses:
        "200":
          description: The existing multipart upload, including all existing chunks that have been uploaded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InFlightMultipartUpload"
        "404":
          description: Multi-part upload not found
          content:
            text/plain:
              schema:
                type: string
              examples:
                MultipartUploadNotFound:
                  value: Multi-part upload not found
        "503":
          description: Internal server error
          content:
            text/plain:
              schema:
                type: string
                example: "Internal server error"
    post:
      summary: Finalizes a multi-part upload. ARx compatible.
      tags:
        - Upload
      responses:
        "200":
          description: The multi-part upload was successfully finalized. The receipt includes a signature of the id, version, timestamp, public key, deadlineHeight and owner.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CompleteMultipartUpload"
        "402":
          description: Insufficient balance
          content:
            text/plain:
              schema:
                type: string
                default: "Insufficient balance"
        "404":
          description: Multi-part upload not found
          content:
            text/plain:
              schema:
                type: string
              examples:
                MultipartUploadNotFound:
                  value: Multi-part upload not found
        "503":
          description: Internal server error
          content:
            text/plain:
              schema:
                type: string
                example: "Internal server error"

  /chunks/:token/:uploadId/finalize:
    servers:
      - url: /
    post:
      summary: Finalizes a multi-part upload asynchronously.
      tags:
        - Upload
      parameters:
        - $ref: "#/components/parameters/uploadId"
        - $ref: "#/components/parameters/token"
      responses:
        "202":
          description: The multi-part upload was successfully enqueued.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CompleteMultipartUpload"
        "402":
          description: Insufficient balance
          content:
            text/plain:
              schema:
                type: string
                default: "Insufficient balance"
        "404":
          description: Multi-part upload not found
          content:
            text/plain:
              schema:
                type: string
              examples:
                MultipartUploadNotFound:
                  value: Multi-part upload not found
        "503":
          description: Internal server error
          content:
            text/plain:
              schema:
                type: string
                example: "Internal server error"

  /chunks/:token/:uploadId/status:
    servers:
      - url: /
    get:
      summary: Gets the status of a multi-part upload.
      tags:
        - Upload
      parameters:
        - $ref: "#/components/parameters/uploadId"
        - $ref: "#/components/parameters/token"
        - $ref: "#/components/parameters/token"
      responses:
        "200":
          description: The status of the multi-part upload
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: The status of the multi-part upload.
                    example: "VALIDATING"
                    enum:
                      - "VALIDATING"
                      - "ASSEMBLING"
                      - "INVALID"
                      - "UNDERFUNDED"
                  timestamp:
                    type: integer
                    description: The timestamp in millisecond of when the multi-part status was retrieved.
                    example: 1700590909589
        "404":
          description: Multi-part upload not found
          content:
            text/plain:
              schema:
                type: string
              examples:
                MultipartUploadNotFound:
                  value: Multi-part upload not found
        "503":
          description: Internal server error
          content:
            text/plain:
              schema:
                type: string
                example: "Internal server error"

  /chunks/:token/:uploadId/:chunkOffset:
    servers:
      - url: /
    post:
      summary: Posts a chunk of a multi-part upload. ARx compatible.
      tags:
        - Upload
      parameters:
        - $ref: "#/components/parameters/uploadId"
        - $ref: "#/components/parameters/token"
        - $ref: "#/components/parameters/chunkOffset"
      requestBody:
        required: true
        description: A chunk of a multi-part upload
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        "200":
          description: The chunk was successfully posted.
        "402":
          description: Insufficient balance
          content:
            text/plain:
              schema:
                type: string
                default: "Insufficient balance"
        "404":
          description: Multi-part upload not found
          content:
            text/plain:
              schema:
                type: string
              examples:
                MultipartUploadNotFound:
                  value: Multi-part upload not found
        "503":
          description: Internal server error
          content:
            text/plain:
              schema:
                type: string
                example: "Internal server error"
